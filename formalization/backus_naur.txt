# REGEX
<identifier> ::= ([A-Z]|[a-z]|[_])([A-z]|[a-z]|[0-9]|[_])*
<decimal> ::= (([0-9])+[.]([0-9])*)|(([0-9])*[.]([0-9])+)
<integer> ::= ([0-9])+

# PARSER
<parse> ::= {<line>} <EOF>
<line> ::= <endLine> | ((<expression> | <variableDeclaration>) <endLine>)

<expression> ::= <andExpression> ["||"  <expression>]
<andExpression> ::= <notExpression> ["&&" <andExpression>]
<notExpression> ::= "!" <notExpression> | <boolOperators>
<boolOperators> ::= <mathExpression> [("==" | "!=" | ">" | ">=" | "<" | "<=") <boolOperators>]
<mathExpression> ::= <term> [("+" | "-") <mathExpression>]
<term> ::= <factor> [("*" | "/" | "%") <term>]
<factor> ::= <value> ["^" <factor>]
<unary> ::= (("+" | "-") <unary>) | <value> 
<value> ::= <constants> | <variables>  | "(" <expression> ")"
<constants> ::= <decimal> | <integer> | "False" | "True"
<variables> ::= <identifier>

<variableDeclaration> ::= <dataType> <declarationList>
<dataType> ::= 'Float' | 'Int' | 'Bool'
<declarationList> ::= <identifier> [<assignment>] [',' <declarationList>]
<assignment> ::= '=' <expression>
